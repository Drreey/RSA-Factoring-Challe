#!/usr/bin/python3

import time
import math
import sys

def pollard_rho_factorization(n):
    # Check if the number is even
    if n % 2 == 0:
        return 2
    
    x = 2
    y = 2
    nontrivial_factor = 1
    
    # Define the function for generating the next value in the sequence
    next_value = lambda x: (x**2 + 1) % n
    
    # Pollard's rho algorithm
    while nontrivial_factor == 1:
        # Generate new values for x and y using the function f(x)
        x = next_value(x)
        # Update x with the next value generated by applying f(x)
        y = next_value(next_value(y))
        # Update y with the next value generated by applying f(f(y))
        nontrivial_factor = math.gcd(abs(x - y), n)
    
    return nontrivial_factor

def is_prime_check(num):
    # Check if a number is prime
    if num < 2:
        # If num is less than 2, it is not prime, so return False
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        # If num is divisible by any number in the range [2, sqrt(num)],
        # it is not prime, so return False
        if num % i == 0:
            return False
    # If num is not divisible by any number in the
    # range [2, sqrt(num)], it is prime, so return True
    return True

def main():
    # Check if the correct number of command-line arguments is provided
    if len(sys.argv) != 2:
        print("Usage: python factorize.py <file>")
        return

    file_path = sys.argv[1]

    start_time = time.time()
    try:
        with open(file_path, 'r') as file:
            # Read the first line of the file and convert it to an integer
            number = int(file.readline().strip())
        # Factorize the number using Pollard's rho algorithm
        factor_p = pollard_rho_factorization(number)
        # Continue factorizing until a prime factor is found
        while not is_prime_check(factor_p):
            factor_p = pollard_rho_factorization(factor_p)
        factor_q = number // factor_p
        # The number is prime
        if factor_p == number or factor_q == number:
            print(f"{number} is prime.")
        else:
            # Print the prime factors
            print(f"{number}={factor_p}*{factor_q}")

        if time.time() - start_time > 5:
            print("Time limit exceeded")
            exit()
    
    except FileNotFoundError:
        print(f"File '{file_path}' not found.")


if __name__ == '__main__':
    main()

